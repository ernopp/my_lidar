
// %Tag(FULLTEXT)%
#include "ros/ros.h"
#include "std_msgs/String.h"
#include "std_msgs/Float64.h"
#include <tf/transform_broadcaster.h>
#include <nav_msgs/Odometry.h>
#include <geometry_msgs/Quaternion.h>
#include <boost/assign.hpp> 
//declare global variables x, y, z, quat, linear velocity(vx, vy, vz), angular velocity(ax, ay, az)
geometry_msgs::Quaternion quat;
double x,y,z,vx,vy,vz,ax,ay,az,th,vth,car_angle;
ros::Time v_current_time, v_last_time, a_current_time, a_last_time, current_time;
/**
 * This tutorial demonstrates simple receipt of messages over the ROS system.
 */
// Listen to quaternion topic
void quatCallback(const geometry_msgs::Quaternion::ConstPtr& msg)
{
  ROS_INFO("Hear a quaternion message");
  //Every time hear something, change the global variable quat
  quat=*msg;
}

// Listen to current angle topic published by the wii_driver
void angleCallback(const std_msgs::Float64::ConstPtr& msg)
{
  ROS_INFO("Hear an angle message");
  th=msg->data;
}

// Listen to quaternion topic
void velCallback(const geometry_msgs::Twist::ConstPtr& msg)
{
  ROS_INFO("Hear a velocity message");
  //Every time hear something, change the global variable quat
  v_current_time = ros::Time::now();
  double dt = (v_current_time - v_last_time).toSec();
  double delta_x = (vx * cos(th) - vy * sin(th)) * dt;
  double delta_y = (vx * sin(th) + vy * cos(th)) * dt;
  x += delta_x;
  y += delta_y;
  vx=msg->linear.x;
  vy=msg->linear.y;
  ax=msg->angular.x;
  //ay=msg->angular.y;
  //az=msg->angular.z;
  v_last_time = v_current_time;
  
}
// %EndTag(CALLBACK)%

int main(int argc, char **argv)
{
  /**
   * The ros::init() function needs to see argc and argv so that it can
   * perform any ROS arguments and name remapping that were provided
   * at the command line. For programmatic remappings you can use a
   * different version of init() which takes remappings directly, but
   * for most command-line programs, passing argc and argv is the easiest
   * way to do it.  The third argument to init() is the name of the node.
   *
   * You must call one of the versions of ros::init() before using any other
   * part of the ROS system.
   */
  ros::init(argc, argv, "Odom_Pub");

  /**
   * NodeHandle is the main access point to communications with the
   * ROS system. The first NodeHandle constructed will fully initialize
   * this node, and the last NodeHandle destructed will close down the node.
   */
  ros::NodeHandle n;

  /**
   * The subscribe() call is how you tell ROS that you want to receive
   * messages on a given topic.  This invokes a call to the ROS master
   * node, which keeps a registry of who is publishing and who is subscribing.
   * Messages are passed to a callback function, here called chatterCallback.  
   * subscribe() returns a Subscriber object that you must hold on to
   * until you want to unsubscribe. When all copies of the Subscriber
   * object go out of scope, this callback will automatically be
   * unsubscribed from this topic.
   *
   * The second parameter to the subscribe() function is the size of
   * the message queue.  If messages are arriving faster than they are
   * being processed, this is the number of messages that will be
   * buffered up before beginning to throw away the oldest ones.
   */

  ros::Subscriber sub_quat = n.subscribe("quaternion", 1000, quatCallback);
  ros::Subscriber sub_vel = n.subscribe("act_vel", 1000, velCallback);
  ros::Subscriber sub_angle_vel = n.subscribe("angle",1000, angleCallback);
  ros::Publisher odom_pub = n.advertise<nav_msgs::Odometry>("odom", 50);
  tf::TransformBroadcaster odom_broadcaster;


  a_current_time = ros::Time::now();
  a_last_time = ros::Time::now();
  v_current_time = ros::Time::now();
  v_last_time = ros::Time::now();
  
  ros::Rate loop_rate(18);
  while(ros::ok()){


  current_time=ros::Time::now();

    //since all odometry is 6DOF we'll need a quaternion created from yaw
    //geometry_msgs::Quaternion odom_quat = tf::createQuaternionMsgFromYaw(th);

    //first, we'll publish the transform over tf
    geometry_msgs::TransformStamped odom_trans;
    odom_trans.header.stamp = current_time;
    odom_trans.header.frame_id = "odom";
    odom_trans.child_frame_id = "base_link";

    odom_trans.transform.translation.x = x;
    odom_trans.transform.translation.y = y;
    odom_trans.transform.translation.z = 0.0;
    //odom_trans.transform.rotation = odom_quat;
    odom_trans.transform.rotation = quat;
    //send the transform
    odom_broadcaster.sendTransform(odom_trans);
    //publish the odom of the mother frame
   //next, odom publisher
    nav_msgs::Odometry odom;
    odom.header.stamp = current_time;
    odom.header.frame_id = "odom";

    //set the position
    odom.pose.pose.position.x = x;
    odom.pose.pose.position.y = y;
    odom.pose.pose.position.z = 0.0;
    odom.pose.pose.orientation = quat;
    odom.pose.covariance =  boost::assign::list_of(1e-3) (0) (0)  (0)  (0)  (0)
                                                      (0) (1e-3)  (0)  (0)  (0)  (0)
                                                      (0)   (0)  (1e-3) (0)  (0)  (0)
                                                      (0)   (0)   (0) (1e-3) (0)  (0)
                                                      (0)   (0)   (0)  (0) (1e-3) (0)
                                                      (0)   (0)   (0)  (0)  (0)  (1e-3) ;

    //set the velocity
    odom.child_frame_id = "base_link";
    odom.twist.twist.linear.x = vx;
    odom.twist.twist.linear.y = vy;
    odom.twist.twist.angular.z = vth;
    odom.twist.covariance =  boost::assign::list_of(1e-3) (0) (0)  (0)  (0)  (0)
                                                      (0) (1e-3)  (0)  (0)  (0)  (0)
                                                      (0)   (0)  (1e-3) (0)  (0)  (0)
                                                      (0)   (0)   (0) (1e-3) (0)  (0)
                                                      (0)   (0)   (0)  (0) (1e-3) (0)
                                                      (0)   (0)   (0)  (0)  (0)  (1e-3) ;

    //publish the message
    odom_pub.publish(odom);
/*   //next, odom publisher
    nav_msgs::Odometry vo;
    vo.header.stamp = current_time;
    vo.header.frame_id = "odom";

    //set the position
    vo.pose.pose.position.x = x;
    vo.pose.pose.position.y = y;
    vo.pose.pose.position.z = 0.0;
    vo.pose.pose.orientation = quat;
    vo.pose.covariance =  boost::assign::list_of(1e-3) (0) (0)  (0)  (0)  (0)
                                                      (0) (1e-3)  (0)  (0)  (0)  (0)
                                                      (0)   (0)  (1e-3) (0)  (0)  (0)
                                                      (0)   (0)   (0) (1e-3) (0)  (0)
                                                      (0)   (0)   (0)  (0) (1e-3) (0)
                                                      (0)   (0)   (0)  (0)  (0)  (1e-3) ;


    //set the velocity
    vo.child_frame_id = "base_link";
    vo.twist.twist.linear.x = vx;
    vo.twist.twist.linear.y = vy;
    vo.twist.twist.angular.z = vth;
    vo.twist.covariance =  boost::assign::list_of(1e-3) (0) (0)  (0)  (0)  (0)
                                                      (0) (1e-3)  (0)  (0)  (0)  (0)
                                                      (0)   (0)  (1e-3) (0)  (0)  (0)
                                                      (0)   (0)   (0) (1e-3) (0)  (0)
                                                      (0)   (0)   (0)  (0) (1e-3) (0)
                                                      (0)   (0)   (0)  (0)  (0)  (1e-3) ;*/
    ros::spinOnce();

    loop_rate.sleep();

  }
  return 0;
}
